maxlon = -64
minlat = 24
maxlat = 52
bbox <- c(xmin = minlon, xmax = maxlon, ymin = minlat, ymax = maxlat)
us_extent <- extent(minlon, maxlon, minlat, maxlat)
# Read the netCDF file
nc_file <- "/Users/zac/Data/PM25_Analysis/WashU/V6GL02.02.CNNPM25.Global.202201-202212.nc"
nc <- nc_open(nc_file)
# Extract latitude, longitude, and concentration data
lat <- ncvar_get(nc, "lat")
lon <- ncvar_get(nc, "lon")
pm25 <- ncvar_get(nc, "PM25")
# Close the netCDF file
nc_close(nc)
# Set negative PM2.5 values to NA
pm25[pm25 < 0] <- NA
# Flip the PM2.5 data along the latitude dimension
pm25 <- pm25[, ncol(pm25):1]
# Create a raster object for PM2.5 data
pm25_raster <- raster(t(pm25), xmn=min(lon), xmx=max(lon), ymn=min(lat), ymx=max(lat))
projection(pm25_raster) <- CRS("+proj=longlat +datum=WGS84")
# Crop the raster to the US extent
r <- crop(pm25_raster, us_extent)
# Convert the raster to a data frame for plotting with ggplot2
r_df <- as.data.frame(r, xy = TRUE)
names(r_df) <- c("lon", "lat", "pm25")
# Read the shapefile of urban areas, rural areas, and state boundaries
urban_shapefile_path <- "/Users/zac/Data/PM25_Analysis/NLCD/US_NLCD_2011_500m_WGS_urban.shp"
rural_shapefile_path <- "/Users/zac/Data/PM25_Analysis/NLCD/US_NLCD_2011_500m_WGS_rural_simplified.shp"
state_shapefile_path <- "/Users/zac/Data/PM25_Analysis/cb_2016_us_state_500k/cb_2016_us_state_500k.shp"
urban_areas <- st_read(urban_shapefile_path)
rural_areas <- st_read(rural_shapefile_path)
states <- st_read(state_shapefile_path)
states <- st_transform(states, crs = st_crs(urban_areas))
# Ensure geometries are valid
urban_areas <- st_make_valid(urban_areas)
rural_areas <- st_make_valid(rural_areas)
states <- st_make_valid(states)
# Simplify geometries to reduce complexity
urban_areas <- st_simplify(urban_areas, dTolerance = 100)
#rural_areas <- st_simplify(rural_areas, dTolerance = 100)
states <- st_simplify(states, dTolerance = 100)
# Buffer geometries by zero to fix potential issues
#states <- st_buffer(states, 0)
#urban_areas <- st_buffer(urban_areas,0)
#rural_areas <- st_buffer(rural_areas,0)
# QA Check: Make sure the concentrations look good on a map
max_value <- 20
p<-ggplot() +
geom_tile(data = r_df, aes(x = lon, y = lat, fill = pm25)) +
scale_fill_viridis_c(name = "PM2.5 (ug/m3)", limits = c(0, max_value), na.value = "white") +
#  geom_sf(data = countries, fill = NA, color = "black", size = 0.5) +
geom_sf(data = states, fill = NA, color = "grey", size = 0.3) +
coord_sf(xlim = c(minlon, maxlon), ylim = c(minlat, maxlat), expand = FALSE) +
theme_minimal() +
labs(title = "Annual PM2.5 Concentration (2022) - US",
x = "Longitude",
y = "Latitude") +
theme(legend.position = "right")
#ggsave("/Users/zac/Data/PM25_Analysis/pm25_concentrations.png", plot = p, width = 10, height = 6, dpi = 300)
# Calculate the average concentrations for each state
states$pm25 <- exact_extract(r, states, 'mean')
# Calculate average concentrations for each rural
rural_concentrations <- exact_extract(r, rural_areas, 'mean')
# Ensure lengths match
state_rural_conc <- data.frame(state = states$NAME[1:length(rural_concentrations)], rural_pm25 = rural_concentrations)
# Calculate concentrations for each urban area
urban_areas$urban_pm25 <- exact_extract(r, urban_areas, 'mean')
# Perform spatial join to get state information for each urban area
urban_areas <- st_join(urban_areas, states, join = st_intersects)
# Add the rural concentration for each urban area based on the state it belongs to
urban_areas <- urban_areas %>%
left_join(state_rural_conc, by = c("NAME" = "state"),relationship = "many-to-many")
library(ncdf4)
library(raster)
library(sf)
library(dplyr)
library(exactextractr)
library(ggplot2)
# Define the bounding box for the US (approximate)
minlon = -130
maxlon = -64
minlat = 24
maxlat = 52
bbox <- c(xmin = minlon, xmax = maxlon, ymin = minlat, ymax = maxlat)
us_extent <- extent(minlon, maxlon, minlat, maxlat)
# Read the netCDF file
nc_file <- "/Users/zac/Data/PM25_Analysis/WashU/V6GL02.02.CNNPM25.Global.202201-202212.nc"
nc <- nc_open(nc_file)
# Extract latitude, longitude, and concentration data
lat <- ncvar_get(nc, "lat")
lon <- ncvar_get(nc, "lon")
pm25 <- ncvar_get(nc, "PM25")
# Close the netCDF file
nc_close(nc)
# Set negative PM2.5 values to NA
pm25[pm25 < 0] <- NA
# Flip the PM2.5 data along the latitude dimension
pm25 <- pm25[, ncol(pm25):1]
# Create a raster object for PM2.5 data
pm25_raster <- raster(t(pm25), xmn=min(lon), xmx=max(lon), ymn=min(lat), ymx=max(lat))
projection(pm25_raster) <- CRS("+proj=longlat +datum=WGS84")
# Crop the raster to the US extent
r <- crop(pm25_raster, us_extent)
# Convert the raster to a data frame for plotting with ggplot2
r_df <- as.data.frame(r, xy = TRUE)
names(r_df) <- c("lon", "lat", "pm25")
# Read the shapefile of urban areas, rural areas, and state boundaries
urban_shapefile_path <- "/Users/zac/Data/PM25_Analysis/us_urban_2023_aland_gt100k.shp"
rural_shapefile_path <- "/Users/zac/Data/PM25_Analysis/NLCD/us_nonurban_2023_aland_gt100k.shp"
state_shapefile_path <- "/Users/zac/Data/PM25_Analysis/cb_2016_us_state_500k/cb_2016_us_state_500k.shp"
urban_areas <- st_read(urban_shapefile_path)
library(ncdf4)
library(raster)
library(sf)
library(dplyr)
library(exactextractr)
library(ggplot2)
# Define the bounding box for the US (approximate)
minlon = -130
maxlon = -64
minlat = 24
maxlat = 52
bbox <- c(xmin = minlon, xmax = maxlon, ymin = minlat, ymax = maxlat)
us_extent <- extent(minlon, maxlon, minlat, maxlat)
# Read the netCDF file
nc_file <- "/Users/zac/Data/PM25_Analysis/WashU/V6GL02.02.CNNPM25.Global.202201-202212.nc"
nc <- nc_open(nc_file)
# Extract latitude, longitude, and concentration data
lat <- ncvar_get(nc, "lat")
lon <- ncvar_get(nc, "lon")
pm25 <- ncvar_get(nc, "PM25")
# Close the netCDF file
nc_close(nc)
# Set negative PM2.5 values to NA
pm25[pm25 < 0] <- NA
# Flip the PM2.5 data along the latitude dimension
pm25 <- pm25[, ncol(pm25):1]
# Create a raster object for PM2.5 data
pm25_raster <- raster(t(pm25), xmn=min(lon), xmx=max(lon), ymn=min(lat), ymx=max(lat))
projection(pm25_raster) <- CRS("+proj=longlat +datum=WGS84")
# Crop the raster to the US extent
r <- crop(pm25_raster, us_extent)
# Convert the raster to a data frame for plotting with ggplot2
r_df <- as.data.frame(r, xy = TRUE)
names(r_df) <- c("lon", "lat", "pm25")
# Read the shapefile of urban areas, rural areas, and state boundaries
urban_shapefile_path <- "/Users/zac/Data/PM25_Analysis/us_urban_2023_aland_gt100k.shp"
rural_shapefile_path <- "/Users/zac/Data/PM25_Analysis/NLCD/us_nonurban_2023_aland_gt100k.shp"
state_shapefile_path <- "/Users/zac/Data/PM25_Analysis/cb_2016_us_state_500k/cb_2016_us_state_500k.shp"
urban_areas <- st_read(urban_shapefile_path)
rural_areas <- st_read(rural_shapefile_path)
library(ncdf4)
library(raster)
library(sf)
library(dplyr)
library(exactextractr)
library(ggplot2)
# Define the bounding box for the US (approximate)
minlon = -130
maxlon = -64
minlat = 24
maxlat = 52
bbox <- c(xmin = minlon, xmax = maxlon, ymin = minlat, ymax = maxlat)
us_extent <- extent(minlon, maxlon, minlat, maxlat)
# Read the netCDF file
nc_file <- "/Users/zac/Data/PM25_Analysis/WashU/V6GL02.02.CNNPM25.Global.202201-202212.nc"
nc <- nc_open(nc_file)
# Extract latitude, longitude, and concentration data
lat <- ncvar_get(nc, "lat")
lon <- ncvar_get(nc, "lon")
pm25 <- ncvar_get(nc, "PM25")
# Close the netCDF file
nc_close(nc)
# Set negative PM2.5 values to NA
pm25[pm25 < 0] <- NA
# Flip the PM2.5 data along the latitude dimension
pm25 <- pm25[, ncol(pm25):1]
# Create a raster object for PM2.5 data
pm25_raster <- raster(t(pm25), xmn=min(lon), xmx=max(lon), ymn=min(lat), ymx=max(lat))
projection(pm25_raster) <- CRS("+proj=longlat +datum=WGS84")
# Crop the raster to the US extent
r <- crop(pm25_raster, us_extent)
# Convert the raster to a data frame for plotting with ggplot2
r_df <- as.data.frame(r, xy = TRUE)
names(r_df) <- c("lon", "lat", "pm25")
# Read the shapefile of urban areas, rural areas, and state boundaries
urban_shapefile_path <- "/Users/zac/Data/PM25_Analysis/us_urban_2023_aland_gt100k.shp"
rural_shapefile_path <- "/Users/zac/Data/PM25_Analysis/us_nonurban_2023_aland_gt100k.shp"
state_shapefile_path <- "/Users/zac/Data/PM25_Analysis/cb_2016_us_state_500k/cb_2016_us_state_500k.shp"
urban_areas <- st_read(urban_shapefile_path)
rural_areas <- st_read(rural_shapefile_path)
states <- st_read(state_shapefile_path)
states <- st_transform(states, crs = st_crs(urban_areas))
# Ensure geometries are valid
urban_areas <- st_make_valid(urban_areas)
rural_areas <- st_make_valid(rural_areas)
states <- st_make_valid(states)
# Simplify geometries to reduce complexity
#urban_areas <- st_simplify(urban_areas, dTolerance = 100)
#rural_areas <- st_simplify(rural_areas, dTolerance = 100)
#states <- st_simplify(states, dTolerance = 100)
# Buffer geometries by zero to fix potential issues
#states <- st_buffer(states, 0)
#urban_areas <- st_buffer(urban_areas,0)
#rural_areas <- st_buffer(rural_areas,0)
# QA Check: Make sure the concentrations look good on a map
max_value <- 20
p<-ggplot() +
geom_tile(data = r_df, aes(x = lon, y = lat, fill = pm25)) +
scale_fill_viridis_c(name = "PM2.5 (ug/m3)", limits = c(0, max_value), na.value = "white") +
#  geom_sf(data = countries, fill = NA, color = "black", size = 0.5) +
geom_sf(data = states, fill = NA, color = "grey", size = 0.3) +
coord_sf(xlim = c(minlon, maxlon), ylim = c(minlat, maxlat), expand = FALSE) +
theme_minimal() +
labs(title = "Annual PM2.5 Concentration (2022) - US",
x = "Longitude",
y = "Latitude") +
theme(legend.position = "right")
#ggsave("/Users/zac/Data/PM25_Analysis/pm25_concentrations.png", plot = p, width = 10, height = 6, dpi = 300)
# Calculate the average concentrations for each state
states$pm25 <- exact_extract(r, states, 'mean')
# Calculate average concentrations for each rural
rural_concentrations <- exact_extract(r, rural_areas, 'mean')
# Ensure lengths match
state_rural_conc <- data.frame(state = states$NAME[1:length(rural_concentrations)], rural_pm25 = rural_concentrations)
# Calculate concentrations for each urban area
urban_areas$urban_pm25 <- exact_extract(r, urban_areas, 'mean')
# Perform spatial join to get state information for each urban area
urban_areas <- st_join(urban_areas, states, join = st_intersects)
# Add the rural concentration for each urban area based on the state it belongs to
urban_areas <- urban_areas %>%
left_join(state_rural_conc, by = c("NAME" = "state"),relationship = "many-to-many")
# Group by urban area identifier (e.g., NAME20) and calculate mean values
urban_areas_aggregated <- urban_areas %>%
group_by(NAME20) %>%
summarize(
urban_pm25 = mean(urban_pm25, na.rm = TRUE),
rural_pm25 = mean(rural_pm25, na.rm = TRUE),
.groups = 'drop'
)
# Calculate the urban increment (urban - rural concentration)
urban_areas_aggregated <- urban_areas_aggregated %>%
mutate(urban_increment = urban_pm25 - rural_pm25)
# Output the results as a table
output_table <- urban_areas_aggregated %>%
st_drop_geometry() %>%
select(area_name = NAME20,urban_pm25, rural_pm25, urban_increment)
# Save the table to a CSV file
write.csv(output_table, "/Users/zac/Data/PM25_Analysis/urban_areas_concentration_table_noflip.csv", row.names = FALSE)
# Save the resulting data to a new shapefile or CSV
#st_write(urban_areas, "/Users/zac/Data/PM25_Analysis/urban_areas_with_concentration.shp",append=FALSE)
#st_write(rural_areas, "/Users/zac/Data/PM25_Analysis/rural_areas_with_concentration.shp",append=FALSE)
#st_write(states, "/Users/zac/Data/PM25_Analysis/states_with_concentration.shp",append=FALSE)
# Optional: Inspect the resulting table
print(output_table)
View(state_rural_conc)
View(state_rural_conc)
View(states)
View(state_rural_conc)
R --version
--version
version
shiny::runApp('Library/Mobile Documents/com~apple~CloudDocs/Work Projects/LADCO/R Scripts/Shiny/Industrial_Point_Analysis_NEI2020')
runApp('Library/Mobile Documents/com~apple~CloudDocs/Work Projects/LADCO/R Scripts/Shiny/Industrial_Point_Analysis_NEI2020')
runApp('Library/Mobile Documents/com~apple~CloudDocs/Work Projects/LADCO/R Scripts/Shiny/Industrial_Point_Analysis_NEI2020')
runApp('Library/Mobile Documents/com~apple~CloudDocs/Work Projects/LADCO/R Scripts/Shiny/Industrial_Point_Analysis_NEI2020')
shiny::runApp('Library/Mobile Documents/com~apple~CloudDocs/Work Projects/LADCO/R Scripts/Shiny/Industrial_Point_Analysis_NEI2020')
runApp('Library/Mobile Documents/com~apple~CloudDocs/Work Projects/LADCO/R Scripts/Shiny/Industrial_Point_Analysis_NEI2020')
shiny::runApp('Library/Mobile Documents/com~apple~CloudDocs/Work Projects/LADCO/R Scripts/Shiny/Industrial_Point_Analysis_NEI2020')
runApp('Library/Mobile Documents/com~apple~CloudDocs/Work Projects/LADCO/R Scripts/Shiny/Industrial_Point_Analysis_NEI2020')
shiny::runApp('Library/Mobile Documents/com~apple~CloudDocs/Work Projects/LADCO/R Scripts/Shiny/Industrial_Point_Analysis_NEI2020')
shiny::runApp('Library/Mobile Documents/com~apple~CloudDocs/Work Projects/LADCO/R Scripts/Shiny/Industrial_Point_Analysis_NEI2020')
runApp('Library/Mobile Documents/com~apple~CloudDocs/Work Projects/LADCO/R Scripts/Shiny/Industrial_Point_Analysis_NEI2020')
runApp('Library/Mobile Documents/com~apple~CloudDocs/Work Projects/LADCO/R Scripts/Shiny/Industrial_Point_Analysis_NEI2020')
runApp('Library/Mobile Documents/com~apple~CloudDocs/Work Projects/LADCO/R Scripts/Shiny/Industrial_Point_Analysis_NEI2020')
runApp('Library/Mobile Documents/com~apple~CloudDocs/Work Projects/LADCO/R Scripts/Shiny/Industrial_Point_Analysis_NEI2020')
runApp('Library/Mobile Documents/com~apple~CloudDocs/Work Projects/LADCO/R Scripts/Shiny/Industrial_Point_Analysis_NEI2020')
shiny::runApp('Library/Mobile Documents/com~apple~CloudDocs/Work Projects/LADCO/R Scripts/Shiny/Industrial_Point_Analysis_NEI2020')
runApp('Library/Mobile Documents/com~apple~CloudDocs/Work Projects/LADCO/R Scripts/Shiny/Industrial_Point_Analysis_NEI2020')
runApp('Library/Mobile Documents/com~apple~CloudDocs/Work Projects/LADCO/R Scripts/Shiny/Industrial_Point_Analysis_NEI2020')
runApp('Library/Mobile Documents/com~apple~CloudDocs/Work Projects/LADCO/R Scripts/Shiny/Industrial_Point_Analysis_NEI2020')
runApp('Library/Mobile Documents/com~apple~CloudDocs/Work Projects/LADCO/R Scripts/Shiny/Industrial_Point_Analysis_NEI2020')
runApp('Library/Mobile Documents/com~apple~CloudDocs/Work Projects/LADCO/R Scripts/Shiny/Industrial_Point_Analysis_NEI2020')
runApp('Library/Mobile Documents/com~apple~CloudDocs/Work Projects/LADCO/R Scripts/Shiny/Industrial_Point_Analysis_NEI2020')
runApp('Library/Mobile Documents/com~apple~CloudDocs/Work Projects/LADCO/R Scripts/Shiny/Industrial_Point_Analysis_NEI2020')
runApp('Library/Mobile Documents/com~apple~CloudDocs/Work Projects/LADCO/R Scripts/Shiny/Industrial_Point_Analysis_NEI2020')
runApp('Library/Mobile Documents/com~apple~CloudDocs/Work Projects/LADCO/R Scripts/Shiny/Industrial_Point_Analysis_NEI2020')
runApp('Library/Mobile Documents/com~apple~CloudDocs/Work Projects/LADCO/R Scripts/Shiny/Industrial_Point_Analysis_NEI2020')
runApp('Library/Mobile Documents/com~apple~CloudDocs/Work Projects/LADCO/R Scripts/Shiny/Industrial_Point_Analysis_NEI2020')
runApp('Library/Mobile Documents/com~apple~CloudDocs/Work Projects/LADCO/R Scripts/Shiny/Industrial_Point_Analysis_NEI2020')
runApp('Library/Mobile Documents/com~apple~CloudDocs/Work Projects/LADCO/R Scripts/Shiny/Industrial_Point_Analysis_NEI2020')
runApp('Library/Mobile Documents/com~apple~CloudDocs/Work Projects/LADCO/R Scripts/Shiny/Industrial_Point_Analysis_NEI2020')
runApp('Library/Mobile Documents/com~apple~CloudDocs/Work Projects/LADCO/R Scripts/Shiny/Industrial_Point_Analysis_NEI2020')
runApp('Library/Mobile Documents/com~apple~CloudDocs/Work Projects/LADCO/R Scripts/Shiny/Industrial_Point_Analysis_NEI2020')
View(data)
View(data)
View(data)
runApp('Library/Mobile Documents/com~apple~CloudDocs/Work Projects/LADCO/R Scripts/Shiny/Industrial_Point_Analysis_NEI2020')
runApp('Library/Mobile Documents/com~apple~CloudDocs/Work Projects/LADCO/R Scripts/Shiny/Industrial_Point_Analysis_NEI2020')
runApp('Library/Mobile Documents/com~apple~CloudDocs/Work Projects/LADCO/R Scripts/Shiny/Industrial_Point_Analysis_NEI2020')
runApp('Library/Mobile Documents/com~apple~CloudDocs/Work Projects/LADCO/R Scripts/Shiny/Industrial_Point_Analysis_NEI2020')
runApp('Library/Mobile Documents/com~apple~CloudDocs/Work Projects/LADCO/R Scripts/Shiny/Industrial_Point_Analysis_NEI2020')
runApp('Library/Mobile Documents/com~apple~CloudDocs/Work Projects/LADCO/R Scripts/Shiny/Industrial_Point_Analysis_NEI2020')
runApp('Library/Mobile Documents/com~apple~CloudDocs/Work Projects/LADCO/R Scripts/Shiny/Industrial_Point_Analysis_NEI2020')
runApp('Library/Mobile Documents/com~apple~CloudDocs/Work Projects/LADCO/R Scripts/Shiny/Industrial_Point_Analysis_NEI2020')
runApp('Library/Mobile Documents/com~apple~CloudDocs/Work Projects/LADCO/R Scripts/Shiny/Industrial_Point_Analysis_NEI2020')
runApp('Library/Mobile Documents/com~apple~CloudDocs/Work Projects/LADCO/R Scripts/Shiny/Industrial_Point_Analysis_NEI2020')
runApp('Library/Mobile Documents/com~apple~CloudDocs/Work Projects/LADCO/R Scripts/Shiny/Industrial_Point_Analysis_NEI2020')
runApp('Library/Mobile Documents/com~apple~CloudDocs/Work Projects/LADCO/R Scripts/Shiny/Industrial_Point_Analysis_NEI2020')
runApp('Library/Mobile Documents/com~apple~CloudDocs/Work Projects/LADCO/R Scripts/Shiny/Industrial_Point_Analysis_NEI2020')
runApp('Library/Mobile Documents/com~apple~CloudDocs/Work Projects/LADCO/R Scripts/Shiny/Industrial_Point_Analysis_NEI2020')
runApp('Library/Mobile Documents/com~apple~CloudDocs/Work Projects/LADCO/R Scripts/Shiny/Industrial_Point_Analysis_NEI2020')
runApp('Library/Mobile Documents/com~apple~CloudDocs/Work Projects/LADCO/R Scripts/Shiny/Industrial_Point_Analysis_NEI2020')
runApp('Library/Mobile Documents/com~apple~CloudDocs/Work Projects/LADCO/R Scripts/Shiny/Industrial_Point_Analysis_NEI2020')
runApp('Library/Mobile Documents/com~apple~CloudDocs/Work Projects/LADCO/R Scripts/Shiny/Industrial_Point_Analysis_NEI2020')
View(data)
runApp('Library/Mobile Documents/com~apple~CloudDocs/Work Projects/LADCO/R Scripts/Shiny/Industrial_Point_Analysis_NEI2020')
runApp('Library/Mobile Documents/com~apple~CloudDocs/Work Projects/LADCO/R Scripts/Shiny/Industrial_Point_Analysis_NEI2020')
runApp('Library/Mobile Documents/com~apple~CloudDocs/Work Projects/LADCO/R Scripts/Shiny/Industrial_Point_Analysis_NEI2020')
runApp('Library/Mobile Documents/com~apple~CloudDocs/Work Projects/LADCO/R Scripts/Shiny/Industrial_Point_Analysis_NEI2020')
shiny::runApp('Library/Mobile Documents/com~apple~CloudDocs/Work Projects/LADCO/R Scripts/Shiny/Industrial_Point_Analysis_NEI2020')
shiny::runApp('Library/Mobile Documents/com~apple~CloudDocs/Work Projects/LADCO/R Scripts/Shiny/Industrial_Point_Analysis_EMP2022v1')
runApp('Library/Mobile Documents/com~apple~CloudDocs/Work Projects/LADCO/R Scripts/Shiny/Industrial_Point_Analysis_EMP2022v1')
runApp('Library/Mobile Documents/com~apple~CloudDocs/Work Projects/LADCO/R Scripts/Shiny/Industrial_Point_Analysis_EMP2022v1')
runApp('Library/Mobile Documents/com~apple~CloudDocs/Work Projects/LADCO/R Scripts/Shiny/Industrial_Point_Analysis_EMP2022v1')
runApp('Library/Mobile Documents/com~apple~CloudDocs/Work Projects/LADCO/R Scripts/Shiny/Industrial_Point_Analysis_EMP2022v1')
runApp('Library/Mobile Documents/com~apple~CloudDocs/Work Projects/LADCO/R Scripts/Shiny/Industrial_Point_Analysis_EMP2022v1')
runApp('Library/Mobile Documents/com~apple~CloudDocs/Work Projects/LADCO/R Scripts/Shiny/Industrial_Point_Analysis_EMP2022v1')
runApp('Library/Mobile Documents/com~apple~CloudDocs/Work Projects/LADCO/R Scripts/Shiny/Industrial_Point_Analysis_EMP2022v1')
runApp('Library/Mobile Documents/com~apple~CloudDocs/Work Projects/LADCO/R Scripts/Shiny/Industrial_Point_Analysis_EMP2022v1')
runApp('Library/Mobile Documents/com~apple~CloudDocs/Work Projects/LADCO/R Scripts/Shiny/Industrial_Point_Analysis_EMP2022v1')
runApp('Library/Mobile Documents/com~apple~CloudDocs/Work Projects/LADCO/R Scripts/Shiny/Industrial_Point_Analysis_EMP2022v1')
runApp('Library/Mobile Documents/com~apple~CloudDocs/Work Projects/LADCO/R Scripts/Shiny/Industrial_Point_Analysis_EMP2022v1')
runApp('Library/Mobile Documents/com~apple~CloudDocs/Work Projects/LADCO/R Scripts/Shiny/Industrial_Point_Analysis_EMP2022v1')
shiny::runApp('Library/Mobile Documents/com~apple~CloudDocs/Work Projects/LADCO/R Scripts/Shiny/State_2022v2EMP_Stacked_Bars')
install.packages(shinythemes)
runApp('Library/Mobile Documents/com~apple~CloudDocs/Work Projects/LADCO/R Scripts/Shiny/State_2022v2EMP_Stacked_Bars')
runApp('Library/Mobile Documents/com~apple~CloudDocs/Work Projects/LADCO/R Scripts/Shiny/State_2022v2EMP_Stacked_Bars')
source("~/Library/Mobile Documents/com~apple~CloudDocs/Work Projects/LADCO/R Scripts/install-packages.R")
install.packages("reshape2")
source("~/Library/Mobile Documents/com~apple~CloudDocs/Work Projects/LADCO/R Scripts/install-packages.R")
shiny::runApp('Library/Mobile Documents/com~apple~CloudDocs/Work Projects/LADCO/R Scripts/Shiny/State_2022v2EMP_Stacked_Bars')
runApp('Library/Mobile Documents/com~apple~CloudDocs/Work Projects/LADCO/R Scripts/Shiny/State_2022v2EMP_Stacked_Bars')
runApp('Library/Mobile Documents/com~apple~CloudDocs/Work Projects/LADCO/R Scripts/Shiny/State_2022v2EMP_Stacked_Bars')
runApp('Library/Mobile Documents/com~apple~CloudDocs/Work Projects/LADCO/R Scripts/Shiny/State_2022v2EMP_Stacked_Bars')
runApp('Library/Mobile Documents/com~apple~CloudDocs/Work Projects/LADCO/R Scripts/Shiny/State_2022v2EMP_Stacked_Bars')
shiny::runApp('Library/Mobile Documents/com~apple~CloudDocs/Work Projects/LADCO/R Scripts/Shiny/State_2022v2EMP_Stacked_Bars')
runApp('Library/Mobile Documents/com~apple~CloudDocs/Work Projects/LADCO/R Scripts/Shiny/State_2022v2EMP_Stacked_Bars')
runApp('Library/Mobile Documents/com~apple~CloudDocs/Work Projects/LADCO/R Scripts/Shiny/State_2022v2EMP_Stacked_Bars')
runApp('Library/Mobile Documents/com~apple~CloudDocs/Work Projects/LADCO/R Scripts/Shiny/State_2022v2EMP_Stacked_Bars')
runApp('Library/Mobile Documents/com~apple~CloudDocs/Work Projects/LADCO/R Scripts/Shiny/State_2022v2EMP_Stacked_Bars')
runApp('Library/Mobile Documents/com~apple~CloudDocs/Work Projects/LADCO/R Scripts/Shiny/State_2022v2EMP_Stacked_Bars')
runApp('Library/Mobile Documents/com~apple~CloudDocs/Work Projects/LADCO/R Scripts/Shiny/State_2022v2EMP_Stacked_Bars')
runApp('Library/Mobile Documents/com~apple~CloudDocs/Work Projects/LADCO/R Scripts/Shiny/State_2022v2EMP_Stacked_Bars')
runApp('Library/Mobile Documents/com~apple~CloudDocs/Work Projects/LADCO/R Scripts/Shiny/State_2022v2EMP_Stacked_Bars')
runApp('Library/Mobile Documents/com~apple~CloudDocs/Work Projects/LADCO/R Scripts/Shiny/State_2022v2EMP_Stacked_Bars')
runApp('Library/Mobile Documents/com~apple~CloudDocs/Work Projects/LADCO/R Scripts/Shiny/State_2022v2EMP_Stacked_Bars')
runApp('Library/Mobile Documents/com~apple~CloudDocs/Work Projects/LADCO/R Scripts/Shiny/State_2022v2EMP_Stacked_Bars')
runApp('Library/Mobile Documents/com~apple~CloudDocs/Work Projects/LADCO/R Scripts/Shiny/State_2022v2EMP_Stacked_Bars')
runApp('Library/Mobile Documents/com~apple~CloudDocs/Work Projects/LADCO/R Scripts/Shiny/State_2022v2EMP_Stacked_Bars')
runApp('Library/Mobile Documents/com~apple~CloudDocs/Work Projects/LADCO/R Scripts/Shiny/State_2022v2EMP_Stacked_Bars')
shiny::runApp('Library/Mobile Documents/com~apple~CloudDocs/Work Projects/LADCO/R Scripts/Shiny/State_2022v2EMP_Stacked_Bars')
runApp('Library/Mobile Documents/com~apple~CloudDocs/Work Projects/LADCO/R Scripts/Shiny/State_2022v2EMP_Stacked_Bars')
runApp('Library/Mobile Documents/com~apple~CloudDocs/Work Projects/LADCO/R Scripts/Shiny/State_2022v2EMP_Stacked_Bars')
runApp('Library/Mobile Documents/com~apple~CloudDocs/Work Projects/LADCO/R Scripts/Shiny/State_2022v2EMP_Stacked_Bars')
runApp('Library/Mobile Documents/com~apple~CloudDocs/Work Projects/LADCO/R Scripts/Shiny/State_2022v2EMP_Stacked_Bars')
runApp('Library/Mobile Documents/com~apple~CloudDocs/Work Projects/LADCO/R Scripts/Shiny/State_2022v2EMP_Stacked_Bars')
runApp('Library/Mobile Documents/com~apple~CloudDocs/Work Projects/LADCO/R Scripts/Shiny/State_2022v2EMP_Stacked_Bars')
runApp('Library/Mobile Documents/com~apple~CloudDocs/Work Projects/LADCO/R Scripts/Shiny/State_2022v2EMP_Stacked_Bars')
runApp('Library/Mobile Documents/com~apple~CloudDocs/Work Projects/LADCO/R Scripts/Shiny/State_2022v2EMP_Stacked_Bars')
shiny::runApp('Library/Mobile Documents/com~apple~CloudDocs/Work Projects/LADCO/R Scripts/Shiny/State_2022v2EMP_Stacked_Bars')
runApp('Library/Mobile Documents/com~apple~CloudDocs/Work Projects/LADCO/R Scripts/Shiny/State_2022v2EMP_Stacked_Bars')
# Define axis labels
xlabel <- "X-axis Label"
ylabel <- "Y-axis Label"
# Adjust margins and axis label positioning
par(mar = c(5, 4, 2, 5), mgp = c(3, 1, 0))  # Adjust margins and label spacing
plot(1, 1, type = "n", pch = 2, col = "green", ylim = c(0, 5.0), xlim = c(-5, 5),
xlab = xlabel, ylab = ylabel, cex.axis = 1.2, cex.lab = 1.4, axes = FALSE)
# Create axes
axis(1, at = c(-5:5), cex.axis = 1.4, tck = -0.02)  # Add x-axis with tick marks aligned to plot border
axis(2, at = c(0:5), cex.axis = 1.4, las = 2, tck = -0.02)  # Add left y-axis
axis(4, at = c(0:5), cex.axis = 1.4, las = 2, tck = -0.02)  # Add right y-axis
# Add label to the right y-axis
mtext(ylabel, side = 4, adj = 0.5, line = 3, cex = 1.4)
# Add lines, rectangles, and text
lines(c(0, 0), c(0, 5.0))  # Draw center line
abline(h = 5.0)  # Create top border line
rect(ybottom = 0, ytop = 2.0, xright = 0.5, xleft = -0.5, lty = 2, lwd = 1, border = "grey45")
rect(ybottom = 0, ytop = 3.5, xright = 2.0, xleft = -2.0, lty = 2, lwd = 1, border = "grey45")
text(-0.5, 2.0, "Simple", cex = 1.2)  # Add text for 35% goal line
text(-2.0, 3.5, "Complex", cex = 1.2)  # Add text for 50% goal line
abline(h = 0)  # Add bottom line
# Define axis labels
xlabel <- "X-axis Label"
ylabel <- "Y-axis Label"
# Adjust margins and axis label positioning
par(mar = c(5, 4, 2, 5), mgp = c(3, 1, 0))  # Adjust margins and label spacing
plot(1, 1, type = "n", pch = 2, col = "green", ylim = c(0, 5.0), xlim = c(-5, 5),
xlab = xlabel, ylab = ylabel, cex.axis = 1.2, cex.lab = 1.4, axes = FALSE)
# Create axes
axis(1, at = c(-5:5), cex.axis = 1.4, tck = -0.02)  # Add x-axis with tick marks aligned to plot border
axis(2, at = c(0:5), cex.axis = 1.4, las = 2, tck = -0.02)  # Add left y-axis
# Define axis labels
xlabel <- "X-axis Label"
ylabel <- "Y-axis Label"
# Adjust margins and axis label positioning
par(mar = c(5, 4, 2, 5), mgp = c(3, 1, 0))  # Adjust margins and label spacing
plot(1, 1, type = "n", pch = 2, col = "green", ylim = c(0, 5.0), xlim = c(-5, 5),
xlab = xlabel, ylab = ylabel, cex.axis = 1.2, cex.lab = 1.4, axes = FALSE)
# Create axes
axis(1, at = c(-5:5), cex.axis = 1.4, tck = -0.02, pos=0)  # Add x-axis with tick marks aligned to plot border
axis(2, at = c(0:5), cex.axis = 1.4, las = 2, tck = -0.02)  # Add left y-axis
plot(1, 1, type = "n", pch = 2, col = "green", ylim = c(0, 5.0), xlim = c(-5, 5),
xlab = xlabel, ylab = ylabel, cex.axis = 1.2, cex.lab = 1.4, axes = FALSE)
# Create axes
axis(1, at = c(-5:5), cex.axis = 1.4, tck = -0.02, pos=0)  # Add x-axis with tick marks aligned to plot border
axis(2, at = c(0:5), cex.axis = 1.4, las = 2, tck = -0.02, pos=-5)  # Add left y-axis
axis(4, at = c(0:5), cex.axis = 1.4, las = 2, tck = -0.02, pos=5)  # Add right y-axis
# Add label to the right y-axis
mtext(ylabel, side = 4, adj = 0.5, line = 3, cex = 1.4)
# Add lines, rectangles, and text
lines(c(0, 0), c(0, 5.0))  # Draw center line
abline(h = 5.0)  # Create top border line
rect(ybottom = 0, ytop = 2.0, xright = 0.5, xleft = -0.5, lty = 2, lwd = 1, border = "grey45")
rect(ybottom = 0, ytop = 3.5, xright = 2.0, xleft = -2.0, lty = 2, lwd = 1, border = "grey45")
text(-0.5, 2.0, "Simple", cex = 1.2)  # Add text for 35% goal line
text(-2.0, 3.5, "Complex", cex = 1.2)  # Add text for 50% goal line
abline(h = 0)  # Add bottom line
shiny::runApp('Library/Mobile Documents/com~apple~CloudDocs/Work Projects/LADCO/R Scripts/Shiny/PM25_Monitor_Mapping')
runApp('Library/Mobile Documents/com~apple~CloudDocs/Work Projects/LADCO/R Scripts/Shiny/PM25_Monitor_Mapping')
runApp('Library/Mobile Documents/com~apple~CloudDocs/Work Projects/LADCO/R Scripts/Shiny/PM25_Monitor_Mapping')
runApp('Library/Mobile Documents/com~apple~CloudDocs/Work Projects/LADCO/R Scripts/Shiny/PM25_Monitor_Mapping')
runApp('Library/Mobile Documents/com~apple~CloudDocs/Work Projects/LADCO/R Scripts/Shiny/PM25_Monitor_Mapping')
runApp('Library/Mobile Documents/com~apple~CloudDocs/Work Projects/LADCO/R Scripts/Shiny/PM25_Monitor_Mapping')
runApp('Library/Mobile Documents/com~apple~CloudDocs/Work Projects/LADCO/R Scripts/Shiny/PM25_Monitor_Mapping')
runApp('Library/Mobile Documents/com~apple~CloudDocs/Work Projects/LADCO/R Scripts/Shiny/PM25_Monitor_Mapping')
runApp('Library/Mobile Documents/com~apple~CloudDocs/Work Projects/LADCO/R Scripts/Shiny/PM25_Monitor_Mapping')
runApp('Library/Mobile Documents/com~apple~CloudDocs/Work Projects/LADCO/R Scripts/Shiny/PM25_Monitor_Mapping')
runApp('Library/Mobile Documents/com~apple~CloudDocs/Work Projects/LADCO/R Scripts/Shiny/PM25_Monitor_Mapping')
runApp('Library/Mobile Documents/com~apple~CloudDocs/Work Projects/LADCO/R Scripts/Shiny/PM25_Monitor_Mapping')
runApp('Library/Mobile Documents/com~apple~CloudDocs/Work Projects/LADCO/R Scripts/Shiny/PM25_Monitor_Mapping')
runApp('Library/Mobile Documents/com~apple~CloudDocs/Work Projects/LADCO/R Scripts/Shiny/PM25_Monitor_Mapping')
runApp('Library/Mobile Documents/com~apple~CloudDocs/Work Projects/LADCO/R Scripts/Shiny/PM25_Monitor_Mapping')
runApp('Library/Mobile Documents/com~apple~CloudDocs/Work Projects/LADCO/R Scripts/Shiny/PM25_Monitor_Mapping')
runApp('Library/Mobile Documents/com~apple~CloudDocs/Work Projects/LADCO/R Scripts/Shiny/PM25_Monitor_Mapping')
runApp('Library/Mobile Documents/com~apple~CloudDocs/Work Projects/LADCO/R Scripts/Shiny/PM25_Monitor_Mapping')
runApp('Library/Mobile Documents/com~apple~CloudDocs/Work Projects/LADCO/R Scripts/Shiny/PM25_Monitor_Mapping')
runApp('Library/Mobile Documents/com~apple~CloudDocs/Work Projects/LADCO/R Scripts/Shiny/PM25_Monitor_Mapping')
runApp('Library/Mobile Documents/com~apple~CloudDocs/Work Projects/LADCO/R Scripts/Shiny/PM25_Monitor_Mapping')
runApp('Library/Mobile Documents/com~apple~CloudDocs/Work Projects/LADCO/R Scripts/Shiny/PM25_Monitor_Mapping')
runApp('Library/Mobile Documents/com~apple~CloudDocs/Work Projects/LADCO/R Scripts/Shiny/PM25_Monitor_Mapping')
runApp('Library/Mobile Documents/com~apple~CloudDocs/Work Projects/LADCO/R Scripts/Shiny/PM25_Monitor_Mapping')
runApp('Library/Mobile Documents/com~apple~CloudDocs/Work Projects/LADCO/R Scripts/Shiny/PM25_Monitor_Mapping')
runApp('Library/Mobile Documents/com~apple~CloudDocs/Work Projects/LADCO/R Scripts/Shiny/PM25_Monitor_Mapping')
runApp('Library/Mobile Documents/com~apple~CloudDocs/Work Projects/LADCO/R Scripts/Shiny/PM25_Monitor_Mapping')
runApp('Library/Mobile Documents/com~apple~CloudDocs/Work Projects/LADCO/R Scripts/Shiny/PM25_Monitor_Mapping')
runApp('Library/Mobile Documents/com~apple~CloudDocs/Work Projects/LADCO/R Scripts/Shiny/PM25_Monitor_Mapping')
runApp('Library/Mobile Documents/com~apple~CloudDocs/Work Projects/LADCO/R Scripts/Shiny/PM25_Monitor_Mapping')
runApp('Library/Mobile Documents/com~apple~CloudDocs/Work Projects/LADCO/R Scripts/Shiny/PM25_Monitor_Mapping')
runApp('Library/Mobile Documents/com~apple~CloudDocs/Work Projects/LADCO/R Scripts/Shiny/PM25_Monitor_Mapping')
runApp('Library/Mobile Documents/com~apple~CloudDocs/Work Projects/LADCO/R Scripts/Shiny/PM25_Monitor_Mapping')
runApp('Library/Mobile Documents/com~apple~CloudDocs/Work Projects/LADCO/R Scripts/Shiny/PM25_Monitor_Mapping')
runApp('Library/Mobile Documents/com~apple~CloudDocs/Work Projects/LADCO/R Scripts/Shiny/PM25_Monitor_Mapping')
runApp('Library/Mobile Documents/com~apple~CloudDocs/Work Projects/LADCO/R Scripts/Shiny/PM25_Monitor_Mapping')
runApp('Library/Mobile Documents/com~apple~CloudDocs/Work Projects/LADCO/R Scripts/Shiny/PM25_Monitor_Mapping')
runApp('Library/Mobile Documents/com~apple~CloudDocs/Work Projects/LADCO/R Scripts/Shiny/PM25_Monitor_Mapping')
runApp('Library/Mobile Documents/com~apple~CloudDocs/Work Projects/LADCO/R Scripts/Shiny/PM25_Monitor_Mapping')
runApp('Library/Mobile Documents/com~apple~CloudDocs/Work Projects/LADCO/R Scripts/Shiny/PM25_Monitor_Mapping')
runApp('Library/Mobile Documents/com~apple~CloudDocs/Work Projects/LADCO/R Scripts/Shiny/PM25_Monitor_Mapping')
runApp('Library/Mobile Documents/com~apple~CloudDocs/Work Projects/LADCO/R Scripts/Shiny/PM25_Monitor_Mapping')
runApp('Library/Mobile Documents/com~apple~CloudDocs/Work Projects/LADCO/R Scripts/Shiny/PM25_Monitor_Mapping')
runApp('Library/Mobile Documents/com~apple~CloudDocs/Work Projects/LADCO/R Scripts/Shiny/PM25_Monitor_Mapping')
runApp('Library/Mobile Documents/com~apple~CloudDocs/Work Projects/LADCO/R Scripts/Shiny/PM25_Monitor_Mapping')
runApp('Library/Mobile Documents/com~apple~CloudDocs/Work Projects/LADCO/R Scripts/Shiny/PM25_Monitor_Mapping')
runApp('Library/Mobile Documents/com~apple~CloudDocs/Work Projects/LADCO/R Scripts/Shiny/PM25_Monitor_Mapping')
runApp('Library/Mobile Documents/com~apple~CloudDocs/Work Projects/LADCO/R Scripts/Shiny/PM25_Monitor_Mapping')
runApp('Library/Mobile Documents/com~apple~CloudDocs/Work Projects/LADCO/R Scripts/Shiny/PM25_Monitor_Mapping')
runApp('Library/Mobile Documents/com~apple~CloudDocs/Work Projects/LADCO/R Scripts/Shiny/PM25_Monitor_Mapping')
runApp('Library/Mobile Documents/com~apple~CloudDocs/Work Projects/LADCO/R Scripts/Shiny/PM25_Monitor_Mapping')
runApp('Library/Mobile Documents/com~apple~CloudDocs/Work Projects/LADCO/R Scripts/Shiny/PM25_Monitor_Mapping')
runApp('Library/Mobile Documents/com~apple~CloudDocs/Work Projects/LADCO/R Scripts/Shiny/PM25_Monitor_Mapping')
runApp('Library/Mobile Documents/com~apple~CloudDocs/Work Projects/LADCO/R Scripts/Shiny/PM25_Monitor_Mapping')
runApp('Library/Mobile Documents/com~apple~CloudDocs/Work Projects/LADCO/R Scripts/Shiny/PM25_Monitor_Mapping')
runApp('Library/Mobile Documents/com~apple~CloudDocs/Work Projects/LADCO/R Scripts/Shiny/PM25_Monitor_Mapping')
runApp('Library/Mobile Documents/com~apple~CloudDocs/Work Projects/LADCO/R Scripts/Shiny/PM25_Monitor_Mapping')
runApp('Library/Mobile Documents/com~apple~CloudDocs/Work Projects/LADCO/R Scripts/Shiny/PM25_Monitor_Mapping')
runApp('Library/Mobile Documents/com~apple~CloudDocs/Work Projects/LADCO/R Scripts/Shiny/PM25_Monitor_Mapping')
runApp('Library/Mobile Documents/com~apple~CloudDocs/Work Projects/LADCO/R Scripts/Shiny/PM25_Monitor_Mapping')
runApp('Library/Mobile Documents/com~apple~CloudDocs/Work Projects/LADCO/R Scripts/Shiny/PM25_Monitor_Mapping')
runApp('Library/Mobile Documents/com~apple~CloudDocs/Work Projects/LADCO/R Scripts/Shiny/PM25_Monitor_Mapping')
runApp('Library/Mobile Documents/com~apple~CloudDocs/Work Projects/LADCO/R Scripts/Shiny/PM25_Monitor_Mapping')
View(scc_data)
View(scc_data)
View(scc_data)
runApp('Library/Mobile Documents/com~apple~CloudDocs/Work Projects/LADCO/R Scripts/Shiny/PM25_Monitor_Mapping')
runApp('Library/Mobile Documents/com~apple~CloudDocs/Work Projects/LADCO/R Scripts/Shiny/PM25_Monitor_Mapping')
runApp('Library/Mobile Documents/com~apple~CloudDocs/Work Projects/LADCO/R Scripts/Shiny/PM25_Monitor_Mapping')
runApp('Library/Mobile Documents/com~apple~CloudDocs/Work Projects/LADCO/R Scripts/Shiny/PM25_Monitor_Mapping')
runApp('Library/Mobile Documents/com~apple~CloudDocs/Work Projects/LADCO/R Scripts/Shiny/PM25_Monitor_Mapping')
runApp('Library/Mobile Documents/com~apple~CloudDocs/Work Projects/LADCO/R Scripts/Shiny/PM25_Monitor_Mapping')
runApp('Library/Mobile Documents/com~apple~CloudDocs/Work Projects/LADCO/R Scripts/Shiny/PM25_Monitor_Mapping')
runApp('Library/Mobile Documents/com~apple~CloudDocs/Work Projects/LADCO/R Scripts/Shiny/PM25_Monitor_Mapping')
runApp('Library/Mobile Documents/com~apple~CloudDocs/Work Projects/LADCO/R Scripts/Shiny/PM25_Monitor_Mapping')
runApp('Library/Mobile Documents/com~apple~CloudDocs/Work Projects/LADCO/R Scripts/Shiny/PM25_Monitor_Mapping')
runApp('Library/Mobile Documents/com~apple~CloudDocs/Work Projects/LADCO/R Scripts/Shiny/PM25_Monitor_Mapping')
shiny::runApp('Library/Mobile Documents/com~apple~CloudDocs/Work Projects/LADCO/R Scripts/Shiny/LADCO_Ozone_Monitor_Dashboard')
runApp('Library/Mobile Documents/com~apple~CloudDocs/Work Projects/LADCO/R Scripts/Shiny/LADCO_Ozone_Monitor_Dashboard')
runApp('Library/Mobile Documents/com~apple~CloudDocs/Work Projects/LADCO/R Scripts/Shiny/LADCO_Ozone_Monitor_Dashboard')
runApp('Library/Mobile Documents/com~apple~CloudDocs/Work Projects/LADCO/R Scripts/Shiny/LADCO_Ozone_Monitor_Dashboard')
runApp('Library/Mobile Documents/com~apple~CloudDocs/Work Projects/LADCO/R Scripts/Shiny/LADCO_Ozone_Monitor_Dashboard')
